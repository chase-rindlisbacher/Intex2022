# Generated by Django 4.1.2 on 2022-11-29 06:27

import datetime
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Comorbidity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'comorbidity',
            },
        ),
        migrations.CreateModel(
            name='Condition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'condition',
            },
        ),
        migrations.CreateModel(
            name='Food_Units',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('abbreviation', models.CharField(max_length=10)),
            ],
            options={
                'db_table': 'food_units',
            },
        ),
        migrations.CreateModel(
            name='Nutrient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('gender_specific', models.CharField(blank=True, max_length=10)),
                ('healthy_target_min', models.FloatField(blank=True)),
                ('healthy_target_max', models.FloatField(blank=True)),
                ('patient_target_min', models.FloatField(blank=True)),
                ('patient_target_max', models.FloatField(blank=True)),
                ('dialysis_target_min', models.FloatField(blank=True)),
                ('dialysis_taget_max', models.FloatField(blank=True)),
                ('units', models.CharField(max_length=10)),
                ('actively_track', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'nutrient',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=30)),
            ],
            options={
                'db_table': 'role',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('phone', models.CharField(max_length=13)),
                ('email', models.CharField(max_length=30)),
            ],
            options={
                'db_table': 'user',
            },
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('patient_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='client_app.user')),
                ('age', models.FloatField()),
                ('height', models.IntegerField()),
                ('weight', models.IntegerField()),
                ('diagnosis_date', models.DateField(default=datetime.date(2022, 11, 28))),
                ('birthday', models.DateField(default=datetime.date(2022, 11, 28))),
                ('comorbidity', models.ManyToManyField(blank=True, to='client_app.comorbidity')),
                ('diagnosis', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='client_app.condition')),
            ],
            options={
                'db_table': 'patient',
            },
        ),
        migrations.CreateModel(
            name='Food_Type',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('units', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='client_app.food_units')),
            ],
            options={
                'db_table': 'food_type',
            },
        ),
        migrations.CreateModel(
            name='Food_Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('description', models.CharField(max_length=500)),
                ('sodium', models.FloatField()),
                ('protein', models.FloatField()),
                ('potassium', models.FloatField()),
                ('phosphorus', models.FloatField()),
                ('food_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='client_app.food_type')),
                ('units', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='client_app.food_units')),
            ],
            options={
                'db_table': 'food_item',
            },
        ),
        migrations.CreateModel(
            name='Fluid_Type',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('units', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='client_app.food_units')),
            ],
            options={
                'db_table': 'fluid_type',
            },
        ),
        migrations.CreateModel(
            name='Drink_Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Water', max_length=30)),
                ('description', models.CharField(max_length=500)),
                ('water', models.FloatField()),
                ('sodium', models.FloatField(blank=True)),
                ('protein', models.FloatField(blank=True)),
                ('potassium', models.FloatField(blank=True)),
                ('phosphorus', models.FloatField(blank=True)),
                ('fluid_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='client_app.fluid_type')),
                ('units', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='client_app.food_units')),
            ],
            options={
                'db_table': 'drink_item',
            },
        ),
        migrations.CreateModel(
            name='Sponsor',
            fields=[
                ('sponsor_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='client_app.user')),
                ('role', models.ManyToManyField(to='client_app.role')),
            ],
            options={
                'db_table': 'sponsor',
            },
        ),
        migrations.CreateModel(
            name='Report_Serum',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField()),
                ('potassium', models.FloatField()),
                ('phosphorus', models.FloatField()),
                ('sodium', models.FloatField()),
                ('creatinine', models.FloatField()),
                ('Abumin', models.FloatField()),
                ('blood_sugar', models.FloatField()),
                ('patient_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='client_app.patient')),
            ],
            options={
                'db_table': 'report_serum',
            },
        ),
        migrations.CreateModel(
            name='Report_Food',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField()),
                ('eating_time', models.CharField(default='Snack', max_length=10)),
                ('units_count', models.FloatField()),
                ('food', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='client_app.food_item')),
                ('patient_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='client_app.patient')),
            ],
            options={
                'db_table': 'report_food',
            },
        ),
        migrations.CreateModel(
            name='Report_Drink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField()),
                ('eating_time', models.CharField(default='Snack', max_length=10)),
                ('units_count', models.FloatField()),
                ('drink', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='client_app.drink_item')),
                ('patient_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='client_app.patient')),
            ],
            options={
                'db_table': 'report_drink',
            },
        ),
        migrations.AddField(
            model_name='patient',
            name='sponsor',
            field=models.ManyToManyField(blank=True, to='client_app.sponsor'),
        ),
    ]
